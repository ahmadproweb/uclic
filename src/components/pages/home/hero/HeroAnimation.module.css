@property --angle {
  syntax: "<angle>";
  inherits: true;
  initial-value: 0deg;
}

@property --circle-diameter {
  syntax: "<length>";
  inherits: true;
  initial-value: 0;
}

.wrapper {
  position: absolute;
  top: 0;
  right: 0;
  width: 35%;
  height: 100%;
  display: flex;
  align-items: center;
  justify-content: center;
  z-index: 10;
  --c1: #E0FF5C;
  --c2: rgba(218, 255, 71, 0.8);
  --c3: rgba(218, 255, 71, 0.6);
  --c4: rgba(218, 255, 71, 0.9);
  --animation-duration: 2.8s;
  --border-width: 0.4vmin;
  --glow: drop-shadow(0 0 4vmin rgba(218, 255, 71, 0.3));
  --hole-pos-y: 20%;
  --hole-radius: 15vmin;
  --offset-per-surface: calc(360deg / 24);
  mix-blend-mode: plus-lighter;
  position: relative;
  z-index: 1;
  transform: scale(0.45);
}

.square {
  width: 300px;
  height: 300px;
  background-color: red;
  margin-right: 50px;
}

:global(.dark) .wrapper {
  --c1: #E0FF5C;
  --c2: #E0FF5C;
  --c3: #E0FF5C;
  --c4: #E0FF5C;
}

.container {
  position: relative;
  width: 25vmin;
  aspect-ratio: 1/1.2;
  --angle: 30deg;
  animation: angle var(--animation-duration) linear infinite;
  transform-style: preserve-3d;
  transform: rotateX(-45deg) rotateY(45deg);
  margin-right: 2vmin;
}

.wall {
  position: absolute;
  inset: 0;
  --wall-gap: 4vmin;
  filter: var(--glow);
  transform-style: preserve-3d;
  opacity: 1;
}

.wall:nth-of-type(1) { transform: translateZ(calc(var(--wall-gap) * -2)); }
.wall:nth-of-type(2) { transform: translateZ(calc(var(--wall-gap) * -1)); }
.wall:nth-of-type(3) { transform: translateZ(0); }
.wall:nth-of-type(4) { transform: translateZ(calc(var(--wall-gap) * 1)); }
.wall:nth-of-type(5) { transform: translateZ(calc(var(--wall-gap) * 2)); }
.wall:nth-of-type(6) { transform: translateZ(calc(var(--wall-gap) * 3)); }

.surface {
  position: absolute;
  inset: 0;
  --circle-diameter: calc(var(--hole-radius) * cos(calc(var(--angle) + var(--angle-offset))));
  -webkit-mask: radial-gradient(
    circle at 50% var(--hole-pos-y),
    transparent var(--circle-diameter),
    black var(--circle-diameter)
  );
  mask: radial-gradient(
    circle at 50% var(--hole-pos-y),
    transparent var(--circle-diameter),
    black var(--circle-diameter)
  );
  -webkit-mask-repeat: no-repeat;
  mask-repeat: no-repeat;
  -webkit-mask-size: 100% 100%;
  mask-size: 100% 100%;
  background: radial-gradient(
      circle at 50% var(--hole-pos-y),
      var(--c4) calc(var(--circle-diameter) + var(--border-width)),
      var(--c4) calc(var(--circle-diameter) + var(--border-width)),
      transparent var(--circle-diameter)
    ),
    linear-gradient(black, black),
    linear-gradient(45deg, var(--c1), var(--c3), var(--c2), var(--c1), var(--c4), var(--c3), var(--c2));
  background-repeat: no-repeat;
  background-size: 100% 100%,
    calc(100% - var(--border-width) * 2) calc(100% - var(--border-width) * 2),
    100%, 100%;
  background-position: 0 0, var(--border-width) var(--border-width), 0 0;
  transform-style: preserve-3d;
}

.surface:nth-child(2) {
  transform: translate(3vmin, 4.2vmin);
}

.left {
  position: absolute;
  transform: skewY(55deg) translateY(2.2vmin);
  inset: 0;
  width: 3.5vmin;
  background: linear-gradient(black, black) no-repeat,
    linear-gradient(to top, var(--c1), var(--c3), var(--c2), var(--c1)) no-repeat;
  background-size: calc(100% - var(--border-width) * 2) calc(100% - var(--border-width) * 2),
    100%, 100%;
  background-position: var(--border-width) var(--border-width), 0 0;
}

.top {
  position: absolute;
  transform: skewX(36deg) translateX(1.5vmin);
  inset: 0;
  height: 4.5vmin;
  background: linear-gradient(black, black) no-repeat,
    linear-gradient(to right, var(--c1), var(--c3), var(--c2), var(--c1)) no-repeat;
  background-size: calc(100% - var(--border-width) * 2) calc(100% - var(--border-width) * 2),
    100%, 100%;
  background-position: var(--border-width) var(--border-width), 0 0;
  -webkit-mask: radial-gradient(
    calc(var(--circle-diameter) * 0.86) at 50% calc(60% / cos(calc(var(--angle) + var(--angle-offset)))),
    transparent var(--circle-diameter),
    black var(--circle-diameter)
  );
  mask: radial-gradient(
    calc(var(--circle-diameter) * 0.86) at 50% calc(60% / cos(calc(var(--angle) + var(--angle-offset)))),
    transparent var(--circle-diameter),
    black var(--circle-diameter)
  );
  -webkit-mask-repeat: no-repeat;
  mask-repeat: no-repeat;
  -webkit-mask-size: 100% 100%;
  mask-size: 100% 100%;
}

/* Generate classes for each surface and top index */
.surface1 { --angle-offset: calc(1 * var(--offset-per-surface)); }
.surface2 { --angle-offset: calc(2 * var(--offset-per-surface)); }
.surface3 { --angle-offset: calc(3 * var(--offset-per-surface)); }
.surface4 { --angle-offset: calc(4 * var(--offset-per-surface)); }
.surface5 { --angle-offset: calc(5 * var(--offset-per-surface)); }
.surface6 { --angle-offset: calc(6 * var(--offset-per-surface)); }
.surface7 { --angle-offset: calc(7 * var(--offset-per-surface)); }
.surface8 { --angle-offset: calc(8 * var(--offset-per-surface)); }
.surface9 { --angle-offset: calc(9 * var(--offset-per-surface)); }
.surface10 { --angle-offset: calc(10 * var(--offset-per-surface)); }
.surface11 { --angle-offset: calc(11 * var(--offset-per-surface)); }
.surface12 { --angle-offset: calc(12 * var(--offset-per-surface)); }

.top1 { --angle-offset: calc(1 * var(--offset-per-surface)); }
.top3 { --angle-offset: calc(3 * var(--offset-per-surface)); }
.top5 { --angle-offset: calc(5 * var(--offset-per-surface)); }
.top7 { --angle-offset: calc(7 * var(--offset-per-surface)); }
.top9 { --angle-offset: calc(9 * var(--offset-per-surface)); }
.top11 { --angle-offset: calc(11 * var(--offset-per-surface)); }

@keyframes angle {
  from { --angle: 360deg; }
  to { --angle: 0deg; }
}

.ballContainer {
  display: grid;
  place-items: center;
  position: absolute;
  inset: 0;
  transform: translateZ(-60vmin);
  animation: ball-container var(--animation-duration) linear infinite;
  transform-style: preserve-3d;
}

.ball {
  position: absolute;
  width: 4vmin;
  aspect-ratio: 1;
  border-radius: 50%;
  background: var(--c1);
  filter: var(--glow);
  animation: ball var(--animation-duration) linear infinite;
}

@keyframes ball-container {
  from {
    transform: translateZ(-30vmin);
    opacity: 0;
  }
  10% {
    transform: translateZ(-20vmin);
    opacity: 1;
  }
  85% {
    opacity: 1;
  }
  to {
    opacity: 0;
    transform: translateZ(50vmin);
  }
} 